package swt.swl.topcard.controller;

import java.util.Observable;
import java.util.Observer;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import swt.swl.topcard.MainApp;
import swt.swl.topcard.model.RequirementCardModel;
import swt.swl.topcard.model.RequirementCardSimple;

public class RequirementCardController implements Observer {

	private MainApp mainApp;
	private String loginName;
	private RequirementCardModel rqModel;
	private LoginWindowController loginController;

	@FXML
	private Pane mainWindowPainLeft, mainWindowPainRight;
	@FXML
	private Button searchRqButton, subsrcibeButton;

	@FXML
	private ImageView startButton;
	@FXML
	private MenuItem createModuleButton, createNewRqButton;
	@FXML
	private TableView<RequirementCardSimple> requirementCardsTable;

	private TableColumn<RequirementCardSimple, String> ownerTableColumn, nameTableColumn;

	// all Labels and ResultLabels
	@FXML
	private Label titleResultLabel, titleLabel, ownerResultLabel, ownerLabel, descriptionResultLabel, descriptionLabel,
			rationaleResultLabel, rationaleLabel, sourceResultLabel, sourceLabel, userstoriesResultLabel,
			userstoriesLabel, supportingMaterialsResultLabel, supportingMaterialsLabel, fitCriterionResultLabel,
			fitCriterionLabel, frozenResultLabel, frozenLabel;

	private ObservableList<RequirementCardSimple> observableList;

	public RequirementCardController() {
		rqModel = new RequirementCardModel();
		this.observableList = FXCollections.observableArrayList();
		rqModel.setObservableArray(this.observableList);
		rqModel.addObserver(this);
	}

	public void initialize() {
		
		
		ObservableList<TableColumn<RequirementCardSimple, ?>> columns = requirementCardsTable.getColumns();

		nameTableColumn = new TableColumn<RequirementCardSimple, String>("Owner");
		nameTableColumn.setCellValueFactory(new PropertyValueFactory<RequirementCardSimple, String>("title"));

		ownerTableColumn = new TableColumn<RequirementCardSimple, String>("Requirement Cards");
		ownerTableColumn.setCellValueFactory(new PropertyValueFactory<RequirementCardSimple, String>("ownerName"));

		// TODO: RequirementCardController: owner is not visible in TableView
		
		System.out.println("SIZE: "+ columns.size());
		
		System.out.println("clearing .. ");
		
		columns.clear();
		
		System.out.println("adding col..");
		
		columns.add(nameTableColumn);
		columns.add(ownerTableColumn);
		
		for (TableColumn<RequirementCardSimple, ?> column : columns) {
			System.out.println("initialize() : " + column.toString());
		}

		this.rqModel.getRequirements();
		requirementCardsTable.setItems(observableList);

		addEventHandlerToTableView();
	}

	private void addEventHandlerToTableView() {
		requirementCardsTable.setOnMousePressed(new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent event) {
				if (requirementCardsTable.getSelectionModel().getSelectedItem() == null) {
					return;
				}
				if (event.isPrimaryButtonDown() && event.getClickCount() == 2) {

					RequirementCardSimple item = requirementCardsTable.getSelectionModel().getSelectedItem();
					item = rqModel.getOverviewDataFromSelectedRq(item);
					System.out.println("username: " + item.getOwnerName());
					System.out.println(rqModel.getLoginName());

					if (rqModel.checkUserName(item.getOwnerName())) {
						openEditView(item);
					} else {
						openVoteView(item);
					}
				} else {
					if (event.isPrimaryButtonDown() && event.getClickCount() == 1) {
						RequirementCardSimple item = requirementCardsTable.getSelectionModel().getSelectedItem();
						item = rqModel.getOverviewDataFromSelectedRq(item);

						titleResultLabel.setText(item.getTitle());
						ownerResultLabel.setText(item.getOwnerName());
						descriptionResultLabel.setText(item.getDescription());
						rationaleResultLabel.setText(item.getRationale());
						sourceResultLabel.setText(item.getSource());
						// TODO: RQCardController: implement all requirements
						// for UserStories part
						// of the application
						userstoriesResultLabel.setText("");
						supportingMaterialsResultLabel.setText(item.getSupportingMaterials());
						fitCriterionResultLabel.setText(item.getFitCriterion());
						frozenResultLabel.setText(item.getIsFrozen() + "");
					}
				}
			}
		});
	}

	public void repaint() {
		mainApp.getPrimaryStage().close();
		mainApp.getPrimaryStage().setScene(loginController.getRequirementCardViewScene());
		mainApp.getPrimaryStage().show();
	}

	@FXML
	void startButtonClicked(MouseEvent event) {
		initialize();
		mainApp.getPrimaryStage().close();
		mainApp.getPrimaryStage().setScene(loginController.getRequirementCardViewScene());
		mainApp.getPrimaryStage().show();
	}

	@FXML
	void createNewRqButtonClicked(ActionEvent event) {

		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/swt/swl/topcard/view/CreateRQCardView.fxml"));
			ScrollPane rootLayout = (ScrollPane) loader.load();
			((CreateRQCardController) loader.getController()).setData(this.rqModel, this);
			Scene scene = new Scene(rootLayout);
			mainApp.getPrimaryStage().setScene(scene);
			mainApp.getPrimaryStage().show();

			event.consume();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@FXML
	void createModuleButtonClicked(ActionEvent event) {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/swt/swl/topcard/view/CreateModuleView.fxml"));
			Pane rootLayout = (Pane) loader.load();
			((CreateModuleController) loader.getController()).setMainController(this);
			Scene scene = new Scene(rootLayout);
			mainApp.getPrimaryStage().setScene(scene);
			mainApp.getPrimaryStage().show();

			event.consume();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@FXML
	void searchRqButtonClicked(ActionEvent event) {

		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/swt/swl/topcard/view/SearchRQCardView.fxml"));
			Pane rootLayout = (Pane) loader.load();
			((SearchRQCardController) loader.getController()).setData(this.rqModel, this);
			Scene scene = new Scene(rootLayout);
			mainApp.getPrimaryStage().setScene(scene);
			mainApp.getPrimaryStage().show();

			event.consume();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@FXML
	void toVoteButtonClicked(ActionEvent event) {
		rqModel.getMyOrToVoteRequirements(false);
		nameTableColumn.setText("Requirement Cards to vote");

		event.consume();

	}

	@FXML
	void myRqCardsButtonClicked(ActionEvent event) {
		rqModel.getMyOrToVoteRequirements(true);
		nameTableColumn.setText("My Requirement Cards");

		event.consume();

	}

	@FXML
	void subscribeButtonClicked(ActionEvent event) {
		// TODO: RequirementCardController: implement subscribeButtonClicked()
	}

	/**
	 *
	 */
	@Override
	public void update(Observable o, Object update) {

		if (update != null) {
			if (update.toString().equals(loginName)) {
				repaint();
			}
		}
	}

	private void openVoteView(RequirementCardSimple rq) {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/swt/swl/topcard/view/ShowAndVoteRQCard.fxml"));
			Pane rootLayout = (Pane) loader.load();
			((ShowAndVoteRqCardController) loader.getController()).setData(this.rqModel, this, rq);
			Scene scene = new Scene(rootLayout);
			mainApp.getPrimaryStage().setScene(scene);
			mainApp.getPrimaryStage().show();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 *
	 * @param rqTitle
	 */
	private void openEditView(RequirementCardSimple rq) {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/swt/swl/topcard/view/EditRqCardView.fxml"));
			ScrollPane rootLayout = (ScrollPane) loader.load();
			((EditRqCardController) loader.getController()).setData(this.rqModel, this, rq);
			Scene scene = new Scene(rootLayout);
			mainApp.getPrimaryStage().setScene(scene);
			mainApp.getPrimaryStage().show();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 *
	 * @param loginName
	 * @param mainApp
	 * @param loginWindowController
	 */
	public void setData(String loginName, MainApp mainApp, LoginWindowController loginWindowController) {
		
		this.loginName = loginName;
		this.mainApp = mainApp;
		this.loginController = loginWindowController;
		rqModel.setLoginName(loginName);
		
		for (TableColumn<RequirementCardSimple, ?> column : requirementCardsTable.getColumns()) {
			System.out.println("setData() : " + column.toString());
		}
	}

	public void setMainApp(MainApp mainApp) {
		this.mainApp = mainApp;
	}

	public String getLoginName() {
		return loginName;
	}

	public void setLoginName(String loginName) {
		this.loginName = loginName;
	}

	public RequirementCardModel getRqModel() {
		return rqModel;
	}

	public void setRqModel(RequirementCardModel rqModel) {
		this.rqModel = rqModel;
	}

}
